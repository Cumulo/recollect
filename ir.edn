{:package "recollect",
 :root {:ns "main", :def "main!"},
 :files {"comp.panel" {:ns ["ns"
                            "recollect.comp.panel"
                            [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "span" "div"]]]
                            [":require"
                             ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                             ["[]" "respo-ui.style" ":as" "ui"]
                             ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                             ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]]],
                       :defs {"render-button" ["defn"
                                               "render-button"
                                               ["title" "op"]
                                               ["div"
                                                ["{}"
                                                 [":style" "ui/button"]
                                                 [":inner-text" "title"]
                                                 [":event" ["{}" [":click" ["on-click" "op"]]]]]]],
                              "style-line" ["def" "style-line" ["{}" [":height" "|40px"]]],
                              "comp-panel" ["defcomp"
                                            "comp-panel"
                                            []
                                            ["div"
                                             ["{}"]
                                             ["div"
                                              ["{}" [":style" "style-line"]]
                                              ["render-button" "|Change lit-0" ":lit-0"]
                                              ["=<" "8" "nil"]
                                              ["render-button" "|Change lit-1" ":lit-1"]]
                                             ["div"
                                              ["{}" [":style" "style-line"]]
                                              ["render-button" "|Change map-0" ":map-0"]
                                              ["=<" "8" "nil"]
                                              ["render-button" "|Remove map-0" ":map-0-rm"]]
                                             ["div"
                                              ["{}" [":style" "style-line"]]
                                              ["render-button" "|Change vec-0" ":vec-0"]
                                              ["=<" "8" "nil"]
                                              ["render-button" "|Remove vec-0" ":vec-0-rm"]]
                                             ["div"
                                              ["{}" [":style" "style-line"]]
                                              ["render-button" "|Change seq-0" ":seq-0"]
                                              ["=<" "8" "nil"]
                                              ["render-button" "|Change seq-0 remove" ":seq-0-rm"]]
                                             ["div"
                                              ["{}" [":style" "style-line"]]
                                              ["render-button" "|Change set-0" ":set-0"]
                                              ["=<" "8" "0"]
                                              ["render-button" "|Change set-0 remove" ":set-0-rm"]]
                                             ["div"
                                              ["{}" [":style" "style-line"]]
                                              ["render-button" "|Change date" ":date"]]
                                             ["div"
                                              ["{}" [":style" "style-line"]]
                                              ["render-button" "|Change types" ":types"]]]],
                              "on-click" ["defn"
                                          "on-click"
                                          ["op"]
                                          ["fn" ["e" "dispatch!"] ["dispatch!" "op" ["rand-int" "100"]]]]},
                       :procs []},
         "twig.container" {:ns ["ns"
                                "recollect.twig.container"
                                [":require"
                                 ["[]" "recollect.bunch" ":refer" ["[]" "create-twig"]]
                                 ["[]" "recollect.twig.card" ":refer" ["[]" "twig-card"]]]],
                           :defs {"render" ["defn"
                                            "render"
                                            ["store"]
                                            ["merge"
                                             "store"
                                             ["{}" [":card" ["twig-card" [":user" "store"] [":date" "store"]]]]]],
                                  "twig-container" ["def" "twig-container" ["create-twig" ":container" "render"]]},
                           :procs []},
         "updater" {:ns ["ns" "recollect.updater"],
                    :defs {"updater" ["defn"
                                      "updater"
                                      ["store" "op" "op-data"]
                                      ["case"
                                       "op"
                                       [":lit-0" ["assoc" "store" ":lit-0" "op-data"]]
                                       [":lit-1" ["assoc-in" "store" ["[]" ":in-map" ":lit-1"] "op-data"]]
                                       [":map-0" ["assoc-in" "store" ["[]" ":map-0" ":y"] "op-data"]]
                                       [":map-0-rm"
                                        ["update-in" "store" ["[]" ":map-0"] ["fn" ["cursor"] ["dissoc" "cursor" ":y"]]]]
                                       [":vec-0"
                                        ["update"
                                         "store"
                                         ":vec-0"
                                         ["fn" ["vec-0"] ["conj" "vec-0" "op-data" ":cursor"]]]]
                                       [":vec-0-rm"
                                        ["update" "store" ":vec-0" ["fn" ["vec-0"] ["into" ["[]"] ["butlast" "vec-0"]]]]]
                                       [":seq-0"
                                        ["update" "store" ":seq-0" ["fn" ["seq-0"] ["cons" "op-data" "seq-0"]]]]
                                       [":seq-0-rm" ["update" "store" ":seq-0" ["fn" ["seq-0"] ["rest" "seq-0"]]]]
                                       [":set-0"
                                        ["update" "store" ":set-0" ["fn" ["set-0"] ["conj" "set-0" "op-data"]]]]
                                       [":set-0-rm"
                                        ["update" "store" ":set-0" ["fn" ["set-0"] ["into" ["#{}"] ["rest" "set-0"]]]]]
                                       [":date" ["update-in" "store" ["[]" ":date" ":month"] "inc"]]
                                       [":types"
                                        ["update"
                                         "store"
                                         ":types"
                                         ["fn" ["types-map"] ["assoc" "types-map" "op-data" "true"]]]]
                                       ["do" ["println" "|Unhandled op:" "op"] "store"]]]},
                    :procs []},
         "twig.card" {:ns ["ns"
                           "recollect.twig.card"
                           [":require" ["[]" "recollect.bunch" ":refer" ["[]" "create-twig"]]]],
                      :defs {"render" ["defn" "render" ["user" "date"] ["{}" [":user" "user"] [":date" "date"]]],
                             "comp-card" ["def" "twig-card" ["create-twig" ":card" "render"]]},
                      :procs []},
         "bunch" {:ns ["ns"
                       "recollect.bunch"
                       [":require"
                        ["[]" "recollect.types" ":refer" ["[]" "Twig" "twig?"]]
                        ["[]" "recollect.util" ":refer" ["[]" "=seq" "literal?"]]]],
                  :defs {"render-map" ["defn"
                                       "render-map"
                                       ["data-tree" "cached"]
                                       ["->>"
                                        "data-tree"
                                        ["map"
                                         ["fn"
                                          ["entry"]
                                          ["let"
                                           [[["[]" "k" "v"] "entry"]]
                                           ["[]" "k" ["render-bunch" "v" ["get" "cached" "k"]]]]]]
                                        ["into" ["{}"]]]],
                         "render-seq" ["defn"
                                       "render-seq"
                                       ["data-tree" "cached"]
                                       ["let"
                                        [["size" ["count" "data-tree"]]
                                         ["cached-list" ["into" ["[]"] "cached"]]
                                         ["length" ["count" "cached-list"]]]
                                        ["->>"
                                         "data-tree"
                                         ["map-indexed"
                                          ["fn"
                                           ["idx" "x"]
                                           ["render-bunch" "x" ["get" "cached-list" ["-" "length" ["-" "size" "idx"]]]]]]]]],
                         "render-vector" ["defn"
                                          "render-vector"
                                          ["data-tree" "cached"]
                                          ["->>"
                                           "data-tree"
                                           ["map-indexed"
                                            ["fn" ["idx" "x"] ["render-bunch" "x" ["get" "cached" "idx"]]]]
                                           ["into" ["[]"]]]],
                         "render-set" ["defn"
                                       "render-set"
                                       ["data-tree" "cached"]
                                       ["->>"
                                        "data-tree"
                                        ["map" ["fn" ["x"] ["render-bunch" "x" "nil"]]]
                                        ["into" ["#{}"]]]],
                         "render-bunch" ["defn"
                                         "render-bunch"
                                         ["data-tree" "cached-data-tree"]
                                         ["--" "println" "|Calling render-bunch:" "data-tree" "cached-data-tree"]
                                         ["if"
                                          ["=" ["type" "data-tree"] ["type" "cached-data-tree"]]
                                          ["cond"
                                           [["twig?" "data-tree"]
                                            ["if"
                                             ["and"
                                              ["identical?" [":name" "data-tree"] [":name" "cached-data-tree"]]
                                              ["identical?" [":render" "data-tree"] [":render" "cached-data-tree"]]
                                              ["=seq" [":args" "data-tree"] [":args" "cached-data-tree"]]]
                                             ["do" "cached-data-tree"]
                                             ["assoc"
                                              "data-tree"
                                              ":data"
                                              ["render-bunch" [":data" "data-tree"] [":data" "cached-data-tree"]]]]]
                                           [["literal?" "data-tree"] "data-tree"]
                                           [["map?" "data-tree"] ["render-map" "data-tree" "cached-data-tree"]]
                                           [["vector?" "data-tree"] ["render-vector" "data-tree" "cached-data-tree"]]
                                           [["seq?" "data-tree"] ["render-seq" "data-tree" "cached-data-tree"]]
                                           [["set?" "data-tree"] ["render-set" "data-tree" "cached-data-tree"]]
                                           [":else" ["do" ["println" "|Unexpected data:" "data-tree"] "nil"]]]
                                          ["cond"
                                           [["twig?" "data-tree"]
                                            ["assoc" "data-tree" ":data" ["render-bunch" [":data" "data-tree"] "nil"]]]
                                           [["literal?" "data-tree"] "data-tree"]
                                           [["map?" "data-tree"] ["render-map" "data-tree" "nil"]]
                                           [["vector?" "data-tree"] ["render-vector" "data-tree" "nil"]]
                                           [["seq?" "data-tree"] ["render-seq" "data-tree" "nil"]]
                                           [["set?" "data-tree"] ["render-set" "data-tree" "nil"]]
                                           [":else" ["do" ["println" "|Unexpected data:" "data-tree"] "nil"]]]]],
                         "create-twig" ["defn"
                                        "create-twig"
                                        ["twig-name" "renderer"]
                                        ["fn"
                                         ["&" "args"]
                                         ["Twig." "twig-name" "args" ["apply" "renderer" "args"] "renderer"]]]},
                  :procs []},
         "util" {:ns ["ns" "recollect.util"],
                 :defs {"type->int" ["defn"
                                     "type->int"
                                     ["x"]
                                     ["cond"
                                      [["number?" "x"] "0"]
                                      [["keyword?" "x"] "1"]
                                      [["string?" "x"] "2"]
                                      [["nil?" "x"] "3"]
                                      [":else"
                                       ["throw" ["js/Error." ["str" "|Failed to compare, it's: " ["pr-str" "x"]]]]]]],
                        "literal?" ["defn"
                                    "literal?"
                                    ["x"]
                                    ["or"
                                     ["number?" "x"]
                                     ["string?" "x"]
                                     ["keyword?" "x"]
                                     ["nil?" "x"]
                                     ["symbol?" "x"]
                                     ["true?" "x"]
                                     ["false?" "x"]]],
                        "=seq" ["defn"
                                "=seq"
                                ["xs" "ys"]
                                ["if"
                                 ["empty?" "xs"]
                                 ["if" ["empty?" "ys"] "true" "false"]
                                 ["if"
                                  ["empty?" "ys"]
                                  "false"
                                  ["if"
                                   ["identical?" ["first" "xs"] ["first" "ys"]]
                                   ["recur" ["rest" "xs"] ["rest" "ys"]]
                                   "false"]]]],
                        "compare-more" ["defn"
                                        "compare-more"
                                        ["x" "y"]
                                        ["let"
                                         [["type-x" ["type->int" "x"]] ["type-y" ["type->int" "y"]]]
                                         ["if"
                                          ["=" "type-x" "type-y"]
                                          ["compare" "x" "y"]
                                          ["compare" "type-x" "type-y"]]]]},
                 :procs []},
         "schema" {:ns ["ns" "recollect.schema"], :defs {"store" ["def" "store" ["{}" [":states" ["{}"]]]]}, :procs []},
         "diff" {:ns ["ns"
                      "recollect.diff"
                      [":require"
                       ["[]" "recollect.util" ":refer" ["[]" "literal?" "=seq" "compare-more"]]
                       ["[]" "recollect.types" ":refer" ["[]" "twig?" "conceal-twig"]]
                       ["[]" "clojure.set" ":refer" ["[]" "difference"]]]],
                 :defs {"diff-set" ["defn"
                                    "diff-set"
                                    ["collect!" "coord" "a" "b"]
                                    ["let"
                                     [["added" ["difference" "b" "a"]] ["removed" ["difference" "a" "b"]]]
                                     ["collect!" ["[]" "coord" ":st/-+" ["[]" "removed" "added"]]]]],
                        "diff-seq" ["defn"
                                    "diff-seq"
                                    ["collect!" "coord" "a" "b"]
                                    ["find-seq-changes" "collect!" "coord" ["reverse" "a"] ["reverse" "b"]]],
                        "by-key" ["defn" "by-key" ["x" "y"] ["compare-more" ["first" "x"] ["first" "y"]]],
                        "diff-map" ["defn"
                                    "diff-map"
                                    ["collect!" "coord" "a" "b"]
                                    ["let"
                                     [["a-pairs" ["sort" "by-key" "a"]] ["b-pairs" ["sort" "by-key" "b"]]]
                                     ["find-map-changes" "collect!" "coord" "a-pairs" "b-pairs"]]],
                        "find-vector-changes" ["defn"
                                               "find-vector-changes"
                                               ["collect!" "idx" "coord" "a-pairs" "b-pairs"]
                                               ["--" "println" "idx" "a-pairs" "b-pairs"]
                                               ["cond"
                                                [["and" ["empty?" "a-pairs"] ["empty?" "b-pairs"]] "nil"]
                                                [["empty?" "b-pairs"] ["collect!" ["[]" "coord" ":v/-!" "idx"]]]
                                                [["empty?" "a-pairs"]
                                                 ["collect!" ["[]" "coord" ":v/+!" ["conceal-twig" "b-pairs"]]]]
                                                [":else"
                                                 ["do"
                                                  ["diff-bunch"
                                                   "collect!"
                                                   ["conj" "coord" "idx"]
                                                   ["first" "a-pairs"]
                                                   ["first" "b-pairs"]]
                                                  ["recur"
                                                   "collect!"
                                                   ["inc" "idx"]
                                                   "coord"
                                                   ["rest" "a-pairs"]
                                                   ["rest" "b-pairs"]]]]]],
                        "find-seq-changes" ["defn"
                                            "find-seq-changes"
                                            ["collect!" "coord" "ra" "rb"]
                                            ["cond"
                                             [["and" ["empty?" "ra"] ["empty?" "rb"]] "nil"]
                                             [["empty?" "ra"]
                                              ["collect!"
                                               ["[]" "coord" ":sq/-+" ["[]" "0" ["conceal-twig" ["reverse" "rb"]]]]]]
                                             [["empty?" "rb"]
                                              ["collect!" ["[]" "coord" ":sq/-+" ["[]" ["count" "ra"] ["[]"]]]]]
                                             [":else"
                                              ["if"
                                               ["identical?" ["first" "ra"] ["first" "rb"]]
                                               ["recur" "collect!" "coord" ["rest" "ra"] ["rest" "rb"]]
                                               ["collect!"
                                                ["[]"
                                                 "coord"
                                                 ":sq/-+"
                                                 ["[]" ["count" "ra"] ["conceal-twig" ["reverse" "rb"]]]]]]]]],
                        "diff-vector" ["defn"
                                       "diff-vector"
                                       ["collect!" "coord" "a" "b"]
                                       ["find-vector-changes" "collect!" "0" "coord" "a" "b"]],
                        "find-map-changes" ["defn"
                                            "find-map-changes"
                                            ["collect!" "coord" "a-pairs" "b-pairs"]
                                            ["let"
                                             [[["[]" "ka" "va"] ["first" "a-pairs"]]
                                              [["[]" "kb" "vb"] ["first" "b-pairs"]]]
                                             ["cond"
                                              [["and" ["empty?" "a-pairs"] ["empty?" "b-pairs"]] "nil"]
                                              [["empty?" "a-pairs"]
                                               ["do"
                                                ["collect!" ["[]" ["conj" "coord" "kb"] ":m/!" ["conceal-twig" "vb"]]]
                                                ["recur" "collect!" "coord" ["[]"] ["rest" "b-pairs"]]]]
                                              [["empty?" "b-pairs"]
                                               ["do"
                                                ["collect!" ["[]" "coord" ":m/-" "ka"]]
                                                ["recur" "collect!" "coord" ["rest" "a-pairs"] ["[]"]]]]
                                              [["=" "-1" ["compare-more" "ka" "kb"]]
                                               ["do"
                                                ["collect!" ["[]" "coord" ":m/-" "ka"]]
                                                ["recur" "collect!" "coord" ["rest" "a-pairs"] "b-pairs"]]]
                                              [["=" "1" ["compare-more" "ka" "kb"]]
                                               ["do"
                                                ["collect!" ["[]" ["conj" "coord" "kb"] ":m/!" ["conceal-twig" "vb"]]]
                                                ["recur" "collect!" "coord" "a-pairs" ["rest" "b-pairs"]]]]
                                              [":else"
                                               ["do"
                                                ["diff-bunch" "collect!" ["conj" "coord" "ka"] "va" "vb"]
                                                ["recur" "collect!" "coord" ["rest" "a-pairs"] ["rest" "b-pairs"]]]]]]],
                        "diff-bunch" ["defn"
                                      "diff-bunch"
                                      ["collect!" "coord" "a" "b"]
                                      ["if"
                                       ["=" ["type" "a"] ["type" "b"]]
                                       ["cond"
                                        [["twig?" "a"]
                                         ["if"
                                          ["not" ["identical?" "a" "b"]]
                                          ["diff-bunch" "collect!" "coord" [":data" "a"] [":data" "b"]]]]
                                        [["literal?" "b"]
                                         ["if" ["not" ["identical?" "a" "b"]] ["collect!" ["[]" "coord" ":m/!" "b"]]]]
                                        [["map?" "b"] ["diff-map" "collect!" "coord" "a" "b"]]
                                        [["set?" "b"] ["diff-set" "collect!" "coord" "a" "b"]]
                                        [["vector?" "b"] ["diff-vector" "collect!" "coord" "a" "b"]]
                                        [["seq?" "b"] ["diff-seq" "collect!" "coord" "a" "b"]]
                                        [":else" ["do" ["println" "|Unexpected data:" "a" "b"]]]]
                                       ["collect!" ["[]" "coord" ":m/!" ["conceal-twig" "b"]]]]]},
                 :procs []},
         "comp.container" {:ns ["ns"
                                "recollect.comp.container"
                                [":require-macros" ["[]" "respo.macros" ":refer" ["[]" "defcomp" "<>" "span" "div"]]]
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo-ui.style" ":as" "ui"]
                                 ["[]" "respo.core" ":refer" ["[]" "create-comp"]]
                                 ["[]" "respo.comp.space" ":refer" ["[]" "=<"]]
                                 ["[]" "recollect.comp.panel" ":refer" ["[]" "comp-panel"]]
                                 ["[]" "respo-value.comp.value" ":refer" ["[]" "render-value"]]]],
                           :defs {"comp-container" ["defcomp"
                                                    "comp-container"
                                                    ["data-bunch" "client-store"]
                                                    ["let"
                                                     [["states" [":states" "client-store"]]]
                                                     ["div"
                                                      ["{}" [":style" ["merge" "ui/global"]]]
                                                      ["comp-panel"]
                                                      ["--" "div" ["{}"] ["<>" "span" ["pr-str" "data-bunch"] "nil"]]
                                                      ["div" ["{}"] ["<>" "span" ["pr-str" "client-store"] "nil"]]
                                                      ["render-value" "states" "client-store"]]]]},
                           :procs []},
         "types" {:ns ["ns"
                       "recollect.types"
                       [":require"
                        ["[]" "cljs.reader" ":refer" ["[]" "register-tag-parser!" "read-string"]]
                        ["[]" "clojure.string" ":as" "string"]
                        ["[]" "recollect.util" ":refer" ["[]" "literal?"]]]],
                  :defs {"twig?" ["defn" "twig?" ["x"] ["=" ["type" "x"] "Twig"]],
                         "record->name" ["defn"
                                         "record->name"
                                         ["record-name"]
                                         ["string/replace" ["pr-str" "record-name"] "|/" "|."]],
                         "Twig" ["defrecord" "Twig" ["name" "args" "data" "render"]],
                         "conceal-twig" ["defn"
                                         "conceal-twig"
                                         ["data"]
                                         ["--" "println" "|conceal" "data"]
                                         ["cond"
                                          [["literal?" "data"] "data"]
                                          [["twig?" "data"] ["conceal-twig" [":data" "data"]]]
                                          [["map?" "data"]
                                           ["->>"
                                            "data"
                                            ["map"
                                             ["fn"
                                              ["entry"]
                                              ["let" [[["[]" "k" "v"] "entry"]] ["[]" "k" ["conceal-twig" "v"]]]]]
                                            ["into" ["{}"]]]]
                                          [["vector?" "data"] ["mapv" "conceal-twig" "data"]]
                                          [["seq?" "data"] ["map" "conceal-twig" "data"]]
                                          [["set?" "data"] ["->>" "data" ["map" "conceal-twig"] ["into" ["#{}"]]]]
                                          [":else" ["do" ["println" "|Unkown data to conceal-twig:" "data"] "data"]]]]},
                  :procs [["register-tag-parser!" ["record->name" "Twig"] "map->Twig"]]},
         "main" {:ns ["ns"
                      "recollect.main"
                      [":require"
                       ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!" "realize-ssr!"]]
                       ["[]" "respo.cursor" ":refer" ["[]" "mutate"]]
                       ["[]" "recollect.comp.container" ":refer" ["[]" "comp-container"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "recollect.bunch" ":refer" ["[]" "render-bunch"]]
                       ["[]" "recollect.types" ":refer" ["[]" "conceal-twig"]]
                       ["[]" "recollect.twig.container" ":refer" ["[]" "twig-container"]]
                       ["[]" "recollect.diff" ":refer" ["[]" "diff-bunch"]]
                       ["[]" "recollect.patch" ":refer" ["[]" "patch-bunch"]]
                       ["[]" "recollect.updater" ":refer" ["[]" "updater"]]
                       ["[]" "recollect.schema" ":as" "schema"]]],
                 :defs {"ssr?" ["def" "ssr?" ["some?" [".querySelector" "js/document" "|meta.respo-ssr"]]],
                        "dispatch!" ["defn"
                                     "dispatch!"
                                     ["op" "op-data"]
                                     ["let"
                                      [["new-store"
                                        ["if"
                                         ["=" "op" ":states"]
                                         ["update" "@*store" ":states" ["mutate" "op-data"]]
                                         ["updater" "@*store" "op" "op-data"]]]]
                                      ["reset!" "*store" "new-store"]]],
                        "*data-bunch" ["defonce" "*data-bunch" ["atom" "nil"]],
                        "*store" ["defonce"
                                  "*store"
                                  ["atom"
                                   ["merge"
                                    "schema/store"
                                    ["{}"
                                     [":lit-0" "1"]
                                     [":vec-0" ["[]" ["{}" [":a" "1"]]]]
                                     [":seq-0" ["list" ["{}" [":a" "1"]]]]
                                     [":set-0" ["#{}" ["{}" [":a" "1"]]]]
                                     [":map-0" ["{}" [":x" "0"]]]
                                     [":in-map" ["{}" [":lit-1" "1"] [":vec-1" ["[]" ["{}" [":a" "1"]]]]]]
                                     [":date" ["{}" [":year" "2016"] [":month" "10"]]]
                                     [":user" ["{}" [":name" "|Chen"]]]
                                     [":types" ["{}" [":name" "1"] ["|name" "2"]]]]]]],
                        "render-data-bunch!" ["defn"
                                              "render-data-bunch!"
                                              []
                                              ["let"
                                               [["data-bunch"
                                                 ["render-bunch" ["twig-container" "@*store"] "@*data-bunch"]]
                                                ["*changes" ["atom" ["[]"]]]
                                                ["collect!" ["fn" ["x"] ["swap!" "*changes" "conj" "x"]]]]
                                               ["diff-bunch" "collect!" ["[]"] "@*data-bunch" "data-bunch"]
                                               ["--" "println" "|Data bunch:" ["conceal-twig" "data-bunch"]]
                                               ["println" "|Changes:" "@*changes"]
                                               ["reset!" "*data-bunch" "data-bunch"]
                                               ["let"
                                                [["new-client" ["patch-bunch" "@*client-store" "@*changes"]]]
                                                ["--" "println" "|After patching:" "new-client"]
                                                ["reset!" "*client-store" "new-client"]]]],
                        "main!" ["defn"
                                 "main!"
                                 []
                                 ["if" "ssr?" ["render-app!" "realize-ssr!"]]
                                 ["render-app!" "render!"]
                                 ["add-watch" "*store" ":changes" "render-data-bunch!"]
                                 ["add-watch" "*client-store" ":changes" ["fn" [] ["render-app!" "render!"]]]
                                 ["render-data-bunch!"]
                                 ["println" "|app started!"]],
                        "render-app!" ["defn"
                                       "render-app!"
                                       ["renderer"]
                                       ["renderer"
                                        "mount-target"
                                        ["comp-container" "@*data-bunch" "@*client-store"]
                                        "dispatch!"]],
                        "reload!" ["defn"
                                   "reload!"
                                   []
                                   ["clear-cache!"]
                                   ["render-data-bunch!"]
                                   ["println" "|code update."]],
                        "*client-store" ["defonce" "*client-store" ["atom" "schema/store"]],
                        "mount-target" ["def" "mount-target" [".querySelector" "js/document" "|.app"]]},
                 :procs [["set!" [".-onload" "js/window"] "main!"]]},
         "patch" {:ns ["ns" "recollect.patch" [":require" ["[]" "clojure.set" ":refer" ["[]" "union" "difference"]]]],
                  :defs {"patch-map-set" ["defn"
                                          "patch-map-set"
                                          ["base" "coord" "data"]
                                          ["if" ["empty?" "coord"] "data" ["assoc-in" "base" "coord" "data"]]],
                         "patch-vector-drop" ["defn"
                                              "patch-vector-drop"
                                              ["base" "coord" "data"]
                                              ["update-in"
                                               "base"
                                               "coord"
                                               ["fn" ["cursor"] ["subvec" "cursor" "0" "data"]]]],
                         "patch-one" ["defn"
                                      "patch-one"
                                      ["base" "change"]
                                      ["let"
                                       [[["[]" "coord" "op" "data"] "change"]]
                                       ["case"
                                        "op"
                                        [":v/+!" ["patch-vector-append" "base" "coord" "data"]]
                                        [":v/-!" ["patch-vector-drop" "base" "coord" "data"]]
                                        [":m/-" ["patch-map-remove" "base" "coord" "data"]]
                                        [":m/!" ["patch-map-set" "base" "coord" "data"]]
                                        [":st/-+" ["patch-set" "base" "coord" "data"]]
                                        [":sq/-+" ["patch-seq" "base" "coord" "data"]]
                                        ["do" ["println" "|Unkown op:" "op"] "base"]]]],
                         "patch-vector-append" ["defn"
                                                "patch-vector-append"
                                                ["base" "coord" "data"]
                                                ["update-in"
                                                 "base"
                                                 "coord"
                                                 ["fn" ["cursor"] ["into" ["[]"] ["concat" "cursor" "data"]]]]],
                         "patch-seq" ["defn"
                                      "patch-seq"
                                      ["base" "coord" "data"]
                                      ["let"
                                       [[["[]" "n" "content"] "data"]]
                                       ["update-in"
                                        "base"
                                        "coord"
                                        ["fn"
                                         ["cursor"]
                                         ["concat" "content" ["if" ["zero?" "n"] "cursor" ["drop" "n" "cursor"]]]]]]],
                         "patch-set" ["defn"
                                      "patch-set"
                                      ["base" "coord" "data"]
                                      ["let"
                                       [[["[]" "removed" "added"] "data"]]
                                       ["if"
                                        ["empty?" "coord"]
                                        ["->" "base" ["difference" "removed"] ["union" "added"]]
                                        ["update-in"
                                         "base"
                                         "coord"
                                         ["fn" ["cursor"] ["->" "cursor" ["difference" "removed"] ["union" "added"]]]]]]],
                         "patch-bunch" ["defn"
                                        "patch-bunch"
                                        ["base" "changes"]
                                        ["if"
                                         ["empty?" "changes"]
                                         "base"
                                         ["recur" ["patch-one" "base" ["first" "changes"]] ["rest" "changes"]]]],
                         "patch-map-remove" ["defn"
                                             "patch-map-remove"
                                             ["base" "coord" "path"]
                                             ["if"
                                              ["empty?" "coord"]
                                              ["dissoc" "base" "path"]
                                              ["update-in" "base" "coord" ["fn" ["cursor"] ["dissoc" "cursor" "path"]]]]]},
                  :procs []},
         "render" {:ns ["ns"
                        "recollect.render"
                        [":require"
                         ["[]" "respo.render.html" ":refer" ["[]" "make-string"]]
                         ["[]" "shell-page.core" ":refer" ["[]" "make-page" "spit" "slurp"]]
                         ["[]" "recollect.comp.container" ":refer" ["[]" "comp-container"]]
                         ["[]" "recollect.schema" ":as" "schema"]]],
                   :defs {"main!" ["defn"
                                   "main!"
                                   []
                                   ["if"
                                    ["=" "js/process.env.env" "|dev"]
                                    ["spit" "|target/index.html" ["dev-page"]]
                                    ["spit" "|dist/index.html" ["prod-page"]]]],
                          "base-info" ["def"
                                       "base-info"
                                       ["{}"
                                        [":title" "|Recollect"]
                                        [":icon" "|http://logo.cumulo.org/cumulo.png"]
                                        [":ssr" "nil"]
                                        [":inner-html" "nil"]]],
                          "dev-page" ["defn"
                                      "dev-page"
                                      []
                                      ["make-page"
                                       "|"
                                       ["merge"
                                        "base-info"
                                        ["{}"
                                         [":styles" ["[]"]]
                                         [":scripts" ["[]" "|/main.js" "|/browser/lib.js" "|/browser/main.js"]]]]]],
                          "prod-page" ["defn"
                                       "prod-page"
                                       []
                                       ["let"
                                        [["html-content" ["make-string" ["comp-container" "schema/store"]]]
                                         ["manifest" [".parse" "js/JSON" ["slurp" "|dist/assets-manifest.json"]]]
                                         ["cljs-manifest" [".parse" "js/JSON" ["slurp" "|dist/manifest.json"]]]]
                                        ["make-page"
                                         "html-content"
                                         ["merge"
                                          "base-info"
                                          ["{}"
                                           [":styles" ["[]" ["aget" "manifest" "|main.css"]]]
                                           [":scripts"
                                            ["[]"
                                             ["aget" "manifest" "|main.js"]
                                             ["->" "cljs-manifest" ["aget" "0"] ["aget" "|js-name"]]
                                             ["->" "cljs-manifest" ["aget" "1"] ["aget" "|js-name"]]]]]]]]]},
                   :procs []}}}
