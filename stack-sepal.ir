{:definitions {"main/dispatch!" ["defn" "dispatch!" ["op" "op-data"]], "diff/no-changes" ["def" "no-changes" ["[]"]], "piece.container/piece-container" ["defn" "piece-container" ["store"] ["assoc" "store" ":demo" "|nothing"]], "diff/diff-view" ["defn" "diff-view" ["coord" "a" "b"] ["if" ["=" ["type" "a"] ["type" "b"]] ["cond" [["literal?" "b"] ["if" ["identical?" "a" "b"] "no-changes" ["[]" ["[]" "coord" ":replace" "b"]]]] [["map?" "b"] "nil"] [["set?" "b"] "nil"] [["vector?" "b"] "nil"] [["seq?" "b"] "nil"] [":else" ["do" ["println" "|Unexpected data" "a" "b"] ["[]"]]]] ["[]" ["[]" "coord" ":replace" "b"]]]], "core/render-view" ["defn" "render-view" ["data-tree" "cached-data-tree"] ["println" "|Calling render-view:" "data-tree"] ["if" ["=" ["type" "data-tree"] ["type" "cached-data-tree"]] ["cond" [["piece?" "data-tree"] ["if" ["and" ["identical?" [":name" "data-tree"] [":name" "cached-data-tree"]] ["identical?" [":render" "data-tree"] [":render" "cached-data-tree"]] ["=seq" [":args" "data-tree"] [":args" "cached-data-tree"]]] "cached-data-tree" ["assoc" "data-tree" ":data" ["render-view" [":data" "data-tree"] [":data" "cached-data-tree"]]]]] [["literal?" "data-tree"] "data-tree"] [["map?" "data-tree"] ["render-map" "data-tree" "cached-data-tree"]] [["vector?" "data-tree"] ["render-vector" "data-tree" "cached-data-tree"]] [["seq?" "data-tree"] ["render-seq" "data-tree" "cached-data-tree"]] [["set?" "data-tree"] ["render-set" "data-tree" "cached-data-tree"]] [":else" ["do" ["println" "|Unexpected data:" "data-tree"] "nil"]]] ["cond" [["piece?" "data-tree"] ["assoc" "data-tree" ":data" ["render-view" [":data" "data-tree"] "nil"]]] [["literal?" "data-tree"] "data-tree"] [["map?" "data-tree"] ["render-map" "data-tree" "nil"]] [["vector?" "data-tree"] ["render-vector" "data-tree" "nil"]] [["seq?" "data-tree"] ["render-seq" "data-tree" "nil"]] [["set?" "data-tree"] ["render-set" "data-tree" "nil"]] [":else" ["do" ["println" "|Unexpected data:" "data-tree"] "nil"]]]]], "main/-main!" ["defn" "-main!" [] ["enable-console-print!"] ["if" ["not" ["empty?" "ssr-stages"]] ["let" [["target" [".querySelector" "js/document" "|#app"]]] ["falsify-stage!" "target" ["render-element" ["comp-container" "@data-view-ref" "ssr-stages"] "states-ref"] "dispatch!"]]] ["render-app!"] ["add-watch" "store-ref" ":gc" ["fn" [] ["gc-states!" "states-ref"]]] ["add-watch" "store-ref" ":changes" "render-data-view!"] ["add-watch" "data-view-ref" ":changes" "render-app!"] ["add-watch" "states-ref" ":changes" "render-app!"] ["render-data-view!"] ["println" "|app started!"]], "core/render-set" ["defn" "render-set" ["data-tree" "cached"] ["->>" "data-tree" ["map" ["fn" ["x"] ["render-view" "x" "nil"]]] ["into" ["#{}"]]]], "main/on-jsload!" ["defn" "on-jsload!" [] ["clear-cache!"] ["render-app!"] ["println" "|code update."]], "core/cached-data-view-ref" ["def" "cached-data-view-ref" ["atom" "nil"]], "main/render-app!" ["defn" "render-app!" [] ["let" [["target" [".querySelector" "js/document" "|#app"]]] ["render!" ["comp-container" "@data-view-ref"] "target" "dispatch!" "states-ref"]]], "util/literal?" ["defn" "literal?" ["x"] ["or" ["number?" "x"] ["string?" "x"] ["keyword?" "x"] ["nil?" "x"] ["symbol?" "x"]]], "util/=seq" ["defn" "=seq" ["xs" "ys"] ["if" ["empty?" "xs"] ["if" ["empty?" "ys"] "true" "false"] ["if" ["empty?" "ys"] "false" ["if" ["identical?" ["first" "xs"] ["first" "ys"]] ["recur" ["rest" "xs"] ["rest" "ys"]] "false"]]]], "comp.container/render" ["defn" "render" ["data-view"] ["fn" ["state" "mutate!"] ["div" ["{}" [":style" ["merge" "ui/global"]]] ["comp-text" ["pr-str" "data-view"] "nil"]]]], "core/render-map" ["defn" "render-map" ["data-tree" "cached"] ["->>" "data-tree" ["map" ["fn" ["entry"] ["let" [[["[]" "k" "v"] "entry"]] ["[]" "k" ["render-view" "v" ["get" "cached" "k"]]]]]] ["into" ["{}"]]]], "patch/patch-data" ["defn" "patch-data" []], "types/record->name" ["defn" "record->name" ["record-name"] ["string/replace" ["pr-str" "record-name"] "|/" "|."]], "main/ssr-stages" ["def" "ssr-stages" ["let" [["ssr-element" [".querySelector" "js/document" "|#ssr-stages"]] ["ssr-markup" [".getAttribute" "ssr-element" "|content"]]] ["read-string" "ssr-markup"]]], "comp.container/comp-container" ["def" "comp-container" ["create-comp" ":container" "render"]], "main/store-ref" ["defonce" "store-ref" ["atom" ["{}" [":groups" ["{}" ["0" ["{}" [":title" "|demo"] [":tasks" ["{}" ["0" ["{}" [":title" "|demo"] [":done?" "false"]]]]]]]]]]]], "core/render-seq" ["defn" "render-seq" ["data-tree" "cached"] ["->>" "data-tree" ["map" ["fn" ["x"] ["render-view" "x" "nil"]]]]], "core/render-vector" ["defn" "render-vector" ["data-tree" "cached"] ["->>" "data-tree" ["map-indexed" ["fn" ["idx" "x"] ["render-view" "x" ["get" "cached" "idx"]]]] ["into" ["[]"]]]], "types/piece?" ["defn" "piece?" ["x"] ["=" ["type" "x"] "Piece"]], "main/render-data-view!" ["defn" "render-data-view!" [] ["reset!" "data-view-ref" ["render-view" ["piece-container" "@store-ref"] "@data-view-ref"]]], "main/states-ref" ["defonce" "states-ref" ["atom" ["{}"]]], "main/data-view-ref" ["def" "data-view-ref" ["atom" "nil"]], "core/create-piece" ["defn" "create-piece" ["piece-name" "renderer"] ["fn" ["piece-name" "&" "args"] ["Piece." "piece-name" "args" ["apply" "renderer" "args"] "renderer"]]], "types/Piece" ["defrecord" "Piece" ["name" "args" "data" "render"]]}, :namespaces {"comp.container" ["ns" "recollect.comp.container" [":require" ["[]" "hsl.core" ":refer" ["[]" "hsl"]] ["[]" "respo-ui.style" ":as" "ui"] ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]] ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]] ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]]], "main" ["ns" "recollect.main" [":require" ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!" "falsify-stage!" "render-element" "gc-states!"]] ["[]" "recollect.comp.container" ":refer" ["[]" "comp-container"]] ["[]" "cljs.reader" ":refer" ["[]" "read-string"]] ["[]" "recollect.core" ":refer" ["[]" "render-view"]] ["[]" "recollect.piece.container" ":refer" ["[]" "piece-container"]]]], "core" ["ns" "recollect.core" [":require" ["[]" "recollect.types" ":refer" ["[]" "Piece" "piece?"]] ["[]" "recollect.util" ":refer" ["[]" "=seq" "literal?"]]]], "types" ["ns" "recollect.types" [":require" ["[]" "cljs.reader" ":refer" ["[]" "register-tag-parser!" "read-string"]] ["[]" "clojure.string" ":as" "string"]]], "piece.container" ["ns" "recollect.piece.container"], "util" ["ns" "recollect.util"], "diff" ["ns" "recollect.diff" [":require" ["[]" "recollect.util" ":refer" ["[]" "literal?"]]]], "patch" ["ns" "recollect.patch"]}, :procedures {"main" [["set!" [".-onload" "js/window"] "-main!"]], "core" [], "types" [["register-tag-parser!" ["record->name" "Piece"] "map->Piece"]], "piece.container" [], "util" [], "diff" [], "patch" []}, :package "recollect"}